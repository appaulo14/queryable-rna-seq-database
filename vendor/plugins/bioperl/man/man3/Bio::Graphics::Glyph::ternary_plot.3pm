.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Graphics::Glyph::ternary_plot 3"
.TH Bio::Graphics::Glyph::ternary_plot 3 "2012-12-24" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Graphics::Glyph::ternary_plot \- Draw ternary plot data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #!/usr/bin/perl
\&
\& use strict;
\& use warnings;
\&
\& use Bio::Graphics;
\& use Bio::Graphics::Feature;
\&
\& my $segment  = Bio::Graphics::Feature\->new(\-start=>1,\-end=>700);
\& my $snp1     = Bio::Graphics::Feature\->new(\-start     => 500,
\&                                           \-end       => 501,
\&                                           \-name      => \*(Aqrs000001\*(Aq,
\&                                           \-attributes=> {triples => [
\&                                                                      [0.01, 0.81, 0.18, \*(Aqred\*(Aq,  \*(AqCEPH\*(Aq],
\&                                                                      [0.25, 0.25, 0.50, \*(Aqblue\*(Aq, \*(AqJPT+CHB\*(Aq],
\&                                                                      [0.81, 0.01, 0.18, \*(Aqgreen\*(Aq,\*(AqYRI\*(Aq],
\&                                                                     ]
\&                                                          }
\&                                          );
\& my $snp2     = Bio::Graphics::Feature\->new(\-start     => 300,
\&                                           \-end       => 301,
\&                                           \-name      => \*(Aqrs12345\*(Aq,
\&                                           \-attributes=> {triples => [
\&                                                                      [0.04, 0.64, 0.32, \*(Aqred\*(Aq,  \*(AqControls\*(Aq],
\&                                                                      [0.16, 0.36, 0.48, \*(Aqblue\*(Aq, \*(AqCases\*(Aq],
\&                                                                     ]
\&                                                          }
\&                                          );
\&
\& my $panel = Bio::Graphics::Panel\->new(\-segment=>$segment,\-width=>800);
\&
\& $panel\->add_track($segment,\-glyph=>\*(Aqarrow\*(Aq,\-double=>1,\-tick=>2);
\& $panel\->add_track([$snp1,$snp2],
\&                  \-glyph    => \*(Aqternary_plot\*(Aq,
\&                  \-height   => 80,
\&                  \-fgcolor  => \*(Aqlightgrey\*(Aq,
\&                  \-vertices => [\*(AqAA\*(Aq,\*(AqGG\*(Aq,\*(AqAG\*(Aq],
\&                  \-label    => 1,
\&                 );
\&
\& print $panel\->png;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This glyph draws a light gray equilateral triangle with its base
centered on the feature. The top of the equilateral triangle is equal
to the specified height. To look good, please choose a height of >=
15.
.PP
Inside, the glyph will plot one or more data points using ternary plot
conventions (see http://en.wikipedia.org/wiki/Ternary_plot). The data
consists of a series of (A,B,C) triplets chosen such that the range of
each component is [0.0,1.0] and A + B + C = 1.0. The left, right and
apex of the triangle represent the proportions of A, B and C
respectively. As a component approaches 1.0, it gets closer to its
corresponding vertex.
.PP
The data can be represented as one or more feature tags called \*(L"triples\*(R"
each in the format:
.PP
.Vb 1
\&   A1,B1,C1,<color>,<label>   # (color and label are optional)
.Ve
.PP
or as a callback specified by the option \fB\-triples\fR, which should
return a list of arrays, where each array is a triple, followed by an
optional color. E.G.
.PP
.Vb 4
\& sub my_calback {
\&   my $feature = shift;
\&   return [[0.1,0.5,0.4,\*(Aqred\*(Aq,\*(Aqpt1\*(Aq],[0.2,0.2,0.6,\*(Aqblue\*(Aq,\*(Aqpt2\*(Aq],[0.8,0.2,0.0,\*(Aqgreen\*(Aq,\*(Aqpt4\*(Aq]];
\& }
.Ve
.PP
The color, if it is missing, will be the same as the bgcolor.
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
In addition to the common options, the following glyph-specific
options are recognized:
.PP
.Vb 2
\&  Option      Description 
\&  \-\-\-\-\-\-      \-\-\-\-\-\-\-\-\-\-\-
\&
\&  \-triples    The callback to return triple data.
\&  \-vertices   Labels for the left,right & top vertices
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report them.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Graphics::Panel,
Bio::Graphics::Glyph,
Bio::Graphics::Glyph::arrow,
Bio::Graphics::Glyph::cds,
Bio::Graphics::Glyph::crossbox,
Bio::Graphics::Glyph::diamond,
Bio::Graphics::Glyph::dna,
Bio::Graphics::Glyph::dot,
Bio::Graphics::Glyph::ellipse,
Bio::Graphics::Glyph::extending_arrow,
Bio::Graphics::Glyph::generic,
Bio::Graphics::Glyph::graded_segments,
Bio::Graphics::Glyph::heterogeneous_segments,
Bio::Graphics::Glyph::line,
Bio::Graphics::Glyph::pinsertion,
Bio::Graphics::Glyph::primers,
Bio::Graphics::Glyph::rndrect,
Bio::Graphics::Glyph::segments,
Bio::Graphics::Glyph::ruler_arrow,
Bio::Graphics::Glyph::toomany,
Bio::Graphics::Glyph::transcript,
Bio::Graphics::Glyph::transcript2,
Bio::Graphics::Glyph::translation,
Bio::Graphics::Glyph::triangle,
Bio::Graphics::Glyph::whiskerplot,
Bio::DB::GFF,
Bio::SeqI,
Bio::SeqFeatureI,
Bio::Das,
\&\s-1GD\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
.PP
Copyright (c) 2006 Cold Spring Harbor Laboratory
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
